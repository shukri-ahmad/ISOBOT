<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="nKvv!S+XA!G+KZn;%AUP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="39:!zZrw@;xF_I,.Iwe1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ISOBOT {" line1="" line2="    //% subcategory=Sensors" line3="    //% blockGap=10" line4="    /**" line5="     * Reads digital value from pin P16 and assigns it to variable I1." line6="     */" line7="    //% block=&quot;ReadSensor&quot;" line8="    export function ReadSensor(): void {" line9="        Left = pins.digitalReadPin(DigitalPin.P16);" line10="        MidLeft = pins.digitalReadPin(DigitalPin.P15);" line11="        Mid = pins.digitalReadPin(DigitalPin.P14);" line12="        MidRight = pins.digitalReadPin(DigitalPin.P13);" line13="        Right = pins.digitalReadPin(DigitalPin.P12);" line14="    }" line15="" line16="    // Predefined variable" line17="    export let Left: number = 0;" line18="    export let MidLeft: number = 0;" line19="    export let Mid: number = 0;" line20="    export let MidRight: number = 0;" line21="    export let Right: number = 0;" line22="    //% subcategory=Sensors" line23="    //% blockGap=10" line24="    //% block=&quot;Left&quot;" line25="    export function getLeft(): number {" line26="        return Left;" line27="    }" line28="    //% subcategory=Sensors" line29="    //% blockGap=10" line30="    //% block=&quot;MidLeft&quot;" line31="    export function getMidLeft(): number {" line32="        return MidLeft;" line33="    }" line34="" line35="    //% subcategory=Sensors" line36="    //% blockGap=10" line37="    //% block=&quot;Mid&quot;" line38="    export function getMid(): number {" line39="        return Mid;" line40="    }" line41="" line42="    //% subcategory=Sensors" line43="    //% blockGap=10" line44="    //% block=&quot;MidRight&quot;" line45="    export function getMidRight(): number {" line46="        return MidRight;" line47="    }" line48="" line49="    //% subcategory=Sensors" line50="    //% blockGap=10" line51="    //% block=&quot;Right&quot;" line52="    export function getRight(): number {" line53="        return Right;" line54="    }" line55="" line56="    //% subcategory=Movement" line57="    //% blockGap=10" line58="    //% block=&quot;forward speed $value&quot;" line59="    export function Forward(value: number): void {" line60="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Forward, value)" line61="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Forward, value)" line62="    }" line63="" line64="    //% subcategory=Movement" line65="    //% blockGap=10" line66="    //% block=&quot;Reverse speed $value&quot;" line67="    export function reverse(value: number): void {" line68="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Backward, value)" line69="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Backward, value)" line70="    }" line71="" line72="    //% subcategory=Movement" line73="    //% blockGap=10" line74="    //% block=&quot;Turn right speed $value&quot;" line75="    export function turnRight(value: number): void {" line76="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Forward, value)" line77="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Backward, value)" line78="    }" line79="" line80="    //% subcategory=Movement" line81="    //% blockGap=10" line82="    //% block=&quot;Turn left speed $value&quot;" line83="    export function turnLeft(value: number): void {" line84="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Backward, value)" line85="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Forward, value)" line86="    }" line87="" line88="    //% subcategory=Movement" line89="    //% blockGap=10" line90="    //% block=&quot;Forward turn -&gt; speed right $valueR| speed left $valueL&quot;" line91="    export function forwardturn(valueR: number, valueL: number): void {" line92="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Forward, valueR)" line93="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Forward, valueL)" line94="    }" line95="" line96="    //% subcategory=Movement" line97="    //% blockGap=10" line98="    //% block=&quot;Reverse turn -&gt; speed right $valueR| speed left $valueL&quot;" line99="    export function reverseturn(valueR: number, valueL: number): void {" line100="        motionbit.runMotor(MotionBitMotorChannel.M1, MotionBitMotorDirection.Backward, valueR)" line101="        motionbit.runMotor(MotionBitMotorChannel.M3, MotionBitMotorDirection.Backward, valueL)" line102="    }" line103="" line104="}" numlines="105"></mutation></block></statement></block></xml>